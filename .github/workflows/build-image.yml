name: Build Mastodon Docker Images

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Mastodon release tag (e.g., v4.2.0)"
        required: true
  schedule:
    - cron: "0 0 * * *"

jobs:
  check-for-release:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check_release.outputs.new_release }}
      release_tag: ${{ steps.check_release.outputs.release_tag }}

    steps:
      - name: Check for new Mastodon release
        id: check_release
        run: |
          RELEASE_DATA=$(curl -s https://api.github.com/repos/mastodon/mastodon/releases/latest)
          LATEST_TAG=$(echo "$RELEASE_DATA" | jq -r .tag_name)
          PUBLISHED_AT=$(echo "$RELEASE_DATA" | jq -r .published_at)

          PUBLISHED_TS=$(date -d "$PUBLISHED_AT" +%s)
          CURRENT_TS=$(date +%s)
          ONE_DAY_AGO=$((CURRENT_TS - 86400))

          echo "Latest Mastodon release: $LATEST_TAG (published at $PUBLISHED_AT)"

          if [ "${{ github.event_name }}" == "schedule" ] && [ "$PUBLISHED_TS" -lt "$ONE_DAY_AGO" ]; then
            echo "No new releases in the last 24 hours"
            echo "new_release=false" >> $GITHUB_OUTPUT
          else
            echo "New release detected or manual trigger"
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "release_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

  build-amd64:
    needs: check-for-release
    if: ${{ needs.check-for-release.outputs.new_release == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Mastodon version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            MASTODON_VERSION="${{ github.event.inputs.tag }}"
          else
            MASTODON_VERSION="${{ needs.check-for-release.outputs.release_tag }}"
          fi

          echo "MASTODON_VERSION=${MASTODON_VERSION}" >> $GITHUB_ENV

          CLEAN_VERSION=$(echo "$MASTODON_VERSION" | sed 's/^v//')
          echo "CLEAN_VERSION=${CLEAN_VERSION}" >> $GITHUB_ENV

      - name: Build and push AMD64 Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./mastodon
          file: ./mastodon/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            bedrockdigger/mastodon-tgui:latest-amd64
            bedrockdigger/mastodon-tgui:${{ env.CLEAN_VERSION }}-amd64
          no-cache: true
          provenance: false

  build-arm64:
    needs: check-for-release
    if: ${{ needs.check-for-release.outputs.new_release == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU for arm64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Mastodon version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            MASTODON_VERSION="${{ github.event.inputs.tag }}"
          else
            MASTODON_VERSION="${{ needs.check-for-release.outputs.release_tag }}"
          fi

          echo "MASTODON_VERSION=${MASTODON_VERSION}" >> $GITHUB_ENV

          CLEAN_VERSION=$(echo "$MASTODON_VERSION" | sed 's/^v//')
          echo "CLEAN_VERSION=${CLEAN_VERSION}" >> $GITHUB_ENV

      - name: Build and push ARM64 Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./mastodon
          file: ./mastodon/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            bedrockdigger/mastodon-tgui:latest-arm64
            bedrockdigger/mastodon-tgui:${{ env.CLEAN_VERSION }}-arm64
          no-cache: true
          provenance: false
